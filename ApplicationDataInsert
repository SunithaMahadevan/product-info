package com.myretail;

import com.myretail.Model.ItemPrice;
import com.myretail.Model.UserInfo;
import com.myretail.Repository.ProductRepositoryImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@SpringBootApplication
public class Application {
	private static RedisTemplate<String, Map<String, UserInfo>> userTemplate;
	private static String key = "ItemPrice";
	public static void main(String[] args) {
		//SpringApplication.run(Application.class, args);
		final Logger LOGGER = LoggerFactory.getLogger(ProductRepositoryImpl.class);
		LOGGER.info("-----------Starting Redis hash testing-----------");
		ApplicationContext ctx = SpringApplication.run(Application.class, args);
		RedisConnectionFactory connectionFactory = ctx
				.getBean(RedisConnectionFactory.class);
		userTemplate = new RedisTemplate<>();
		userTemplate.setConnectionFactory(connectionFactory);
		userTemplate.setKeySerializer(userTemplate.getStringSerializer());
		userTemplate.setHashKeySerializer(userTemplate.getStringSerializer());
        userTemplate
                .setHashValueSerializer(new Jackson2JsonRedisSerializer<ItemPrice>(
                        ItemPrice.class));
		userTemplate.afterPropertiesSet();

		Application hashTest = ctx.getBean(Application.class);
	
        hashTest.batchInsert();
        hashTest.findAll();
	}

	public void batchInsert() {
        final Logger LOGGER = LoggerFactory.getLogger(ProductRepositoryImpl.class);
        Map<String, ItemPrice> items = new HashMap<>();
        String tcin;
        for (int i = 1; i <= 9; i++) {
            ItemPrice info = new ItemPrice();
            info.setCurrency("USD");
            info.setPrice((float) (4.99 + i));
            tcin = "1386042"+i;
            items.put(tcin, info);
        }
        userTemplate.opsForHash().putAll(key, items);
        LOGGER.info("batchInsert Items[" + items + "] success!");
        LOGGER.info("User Hash size is : " + userTemplate.opsForHash().size(key));
    }

    public void findAll() {
        Map<Object, Object> items = userTemplate.opsForHash().entries(key);
        final Logger LOGGER = LoggerFactory.getLogger(ProductRepositoryImpl.class);
        LOGGER.info("All Items[" + items + "]");
        LOGGER.info("findAll User size is : " + items.size());
    }

    

}
